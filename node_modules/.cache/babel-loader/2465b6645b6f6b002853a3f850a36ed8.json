{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\PotapovDS\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\react-scripts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"E:\\\\JS\\\\react_course\\\\4_connection\\\\src\\\\game.js\";\nimport React, { useState, useEffect } from 'react'; // import './styles/App.css';\n\nimport Table from './components/table/table';\nimport { Redirect } from 'react-router-dom';\nimport axios from 'axios'; // import {Link} from 'react-router-dom';\n\nfunction Game(props) {\n  const player1Name = props.location.state.player1Name;\n  const player2Name = props.location.state.player2Name;\n\n  const _useState = useState(1),\n        _useState2 = _slicedToArray(_useState, 2),\n        currentPlayer = _useState2[0],\n        setCurrentPlayer = _useState2[1];\n\n  const _useState3 = useState(props.location.state.field),\n        _useState4 = _slicedToArray(_useState3, 2),\n        field = _useState4[0],\n        setField = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        isEndGame = _useState6[0],\n        setIsEndGame = _useState6[1];\n\n  const MoveContext = React.createContext(defaultValue);\n  React.createElement(MoveContext.Provider, {\n    value: move,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  });\n  useEffect(() => {\n    const intervalID = setInterval(axios.get('http://localhost:4000/game/status').then(response => {\n      setField(response.data.field);\n      setCurrentPlayer(response.data.currentPlayer);\n    }).catch(error => console.log(error)), 2000);\n    return () => {\n      clearInterval(intervalID);\n    };\n  }, []);\n\n  function clearField() {\n    axios.patch('http://localhost:4000/game').then(res => {\n      setField(res.data);\n      console.log('Поле очищено');\n    }).catch(error => {\n      console.log(error);\n    });\n  } //проверяем заполнен ли ряд, если да, ход не засчитывается, перехода хода нет\n  // остваляем функцию здесь, чтобы обрабатывался алерт\n\n\n  function checkFullColumn(arr) {\n    if (arr.indexOf(0) === -1) {\n      alert('этот ряд заполнен');\n      return true;\n    }\n  } // сам ход\n  // прописываем его в контекст\n\n\n  function move(columnId) {\n    columnId--;\n    if (checkFullColumn(field[columnId])) return; // здесь отправляем запрос на изменение состояния field на сервер\n\n    axios.post('http://localhost:4000/game', {\n      currentPlayer: currentPlayer,\n      column: columnId,\n      isEndGame: isEndGame\n    }).then(res => {\n      if (!res.data.field) {\n        // если ходов больше нет, сервер присваивает переменной field значение false\n        alert('Больше нет ходов');\n        clearField();\n      } else {\n        setField(res.data.field);\n      }\n\n      setCurrentPlayer(res.data.currentPlayer);\n      setIsEndGame(res.data.isEndGame);\n    }).catch(error => {\n      console.log(error);\n    });\n  } // проверка введено ли что-то в поля имен, можно добавить проверку по каждому из полей,\n  // если проверка не прошла возвра на стартовую сраницу\n\n\n  if (!props.location.state.player1Name || !props.location.state.player2Name) {\n    alert('Введите имя игрока');\n    return React.createElement(Redirect, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    });\n  } // если игра закончилась, направляем на конечный экран, передаем имена игроков и номер игрока-победиеля\n\n\n  if (isEndGame === true) {\n    return React.createElement(Redirect, {\n      to: {\n        pathname: '/endGame',\n        state: {\n          currentPlayer: currentPlayer,\n          player1Name: player1Name,\n          player2Name: player2Name\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, player1Name), \"vs\", React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, player2Name), React.createElement(Table, {\n    onColumnPress: move // нужно передать через контекст\n    ,\n    currentPlayer: currentPlayer,\n    player1Name: player1Name,\n    player2Name: player2Name,\n    field: field,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"button\",\n    className: \"reset-button\",\n    onClick: () => {\n      clearField();\n      return React.createElement(Redirect, {\n        to: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      });\n    },\n    value: \"\\u041E\\u0447\\u0438\\u0441\\u0442\\u0438\\u0442\\u044C \\u043F\\u043E\\u043B\\u0435\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }));\n}\n\nexport default Game;","map":{"version":3,"sources":["E:/JS/react_course/4_connection/src/game.js"],"names":["React","useState","useEffect","Table","Redirect","axios","Game","props","player1Name","location","state","player2Name","currentPlayer","setCurrentPlayer","field","setField","isEndGame","setIsEndGame","MoveContext","createContext","defaultValue","move","intervalID","setInterval","get","then","response","data","catch","error","console","log","clearInterval","clearField","patch","res","checkFullColumn","arr","indexOf","alert","columnId","post","column","pathname"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\n// import './styles/App.css';\r\nimport Table from './components/table/table';\r\nimport {Redirect} from 'react-router-dom';\r\nimport axios from 'axios';\r\n// import {Link} from 'react-router-dom';\r\n\r\nfunction Game(props) {\r\n\r\n  const player1Name = props.location.state.player1Name;\r\n  const player2Name = props.location.state.player2Name;\r\n\r\n  const [currentPlayer, setCurrentPlayer] = useState(1);\r\n  const [field, setField] = useState(props.location.state.field);\r\n  const [isEndGame, setIsEndGame] = useState(false);\r\n\r\n  const MoveContext = React.createContext(defaultValue);\r\n\r\n  <MoveContext.Provider value={move}/>\r\n\r\n  useEffect(() => {\r\n      const intervalID = setInterval(\r\n        axios.get('http://localhost:4000/game/status')\r\n        .then((response) => {\r\n          setField(response.data.field);\r\n          setCurrentPlayer(response.data.currentPlayer);\r\n        })\r\n        .catch((error) => console.log(error)),\r\n        2000\r\n      );\r\n      return () => {\r\n        clearInterval(intervalID);\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  function clearField(){\r\n     axios\r\n      .patch(\r\n         'http://localhost:4000/game'\r\n      )\r\n      .then((res)=> {\r\n         setField(res.data);\r\n         console.log('Поле очищено')\r\n      })\r\n      .catch((error)=> {\r\n          console.log(error);\r\n      });\r\n  }\r\n\r\n  //проверяем заполнен ли ряд, если да, ход не засчитывается, перехода хода нет\r\n  // остваляем функцию здесь, чтобы обрабатывался алерт\r\n  function checkFullColumn(arr) {\r\n    if (arr.indexOf(0) === -1) {\r\n      alert('этот ряд заполнен');\r\n      return true;\r\n    }\r\n  }\r\n\r\n  // сам ход\r\n// прописываем его в контекст\r\n\r\n  function move(columnId) {\r\n    columnId--;\r\n    if (checkFullColumn(field[columnId])) return;\r\n\r\n// здесь отправляем запрос на изменение состояния field на сервер\r\n    axios\r\n      .post(\r\n        'http://localhost:4000/game',\r\n        {currentPlayer: currentPlayer, column: columnId, isEndGame: isEndGame }\r\n      )\r\n      .then((res)=> {\r\n         if (!res.data.field){   // если ходов больше нет, сервер присваивает переменной field значение false\r\n            alert('Больше нет ходов');\r\n            clearField();\r\n         } else {\r\n            setField(res.data.field);\r\n         }\r\n         setCurrentPlayer(res.data.currentPlayer);\r\n         setIsEndGame(res.data.isEndGame);\r\n      })\r\n      .catch((error)=> {\r\n         console.log(error);\r\n      });\r\n  }\r\n\r\n  // проверка введено ли что-то в поля имен, можно добавить проверку по каждому из полей,\r\n  // если проверка не прошла возвра на стартовую сраницу\r\n  if (!props.location.state.player1Name || !props.location.state.player2Name) {\r\n    alert('Введите имя игрока');\r\n    return <Redirect to=\"/\" / >\r\n  }\r\n\r\n\r\n   // если игра закончилась, направляем на конечный экран, передаем имена игроков и номер игрока-победиеля\r\n  if (isEndGame === true) {\r\n    return <Redirect to={\r\n      {\r\n        pathname: '/endGame',\r\n        state: {\r\n          currentPlayer: currentPlayer,\r\n          player1Name: player1Name,\r\n          player2Name: player2Name\r\n        }\r\n      }\r\n    }\r\n    />\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <p>{player1Name}</p>\r\n      vs\r\n      <p>{player2Name}</p>\r\n      <Table onColumnPress={move} // нужно передать через контекст\r\n             currentPlayer={currentPlayer}\r\n             player1Name={player1Name}\r\n             player2Name={player2Name}\r\n             field={field}\r\n      />\r\n      <input\r\n         type=\"button\"\r\n         className=\"reset-button\"\r\n         onClick={()=> {\r\n            clearField();\r\n            return <Redirect to=\"/\"/>\r\n         }}\r\n         value='Очистить поле'\r\n         />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n"]},"metadata":{},"sourceType":"module"}